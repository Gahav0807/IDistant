from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import RepairStates
from keyboards.common import main_menu, share_phone_keyboard, confirm_menu, to_main_menu
from config import ADMINS

android_repair_router = Router()

@android_repair_router.message(lambda message: message.text == "Android‚öôÔ∏è")
async def repair_android(message: types.Message, state: FSMContext):
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å –≤–∞—à–µ–≥–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=to_main_menu)
    await state.set_state(RepairStates.choosing_model)

@android_repair_router.message(RepairStates.choosing_model)
async def select_device(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    await message.answer("–û–ø–∏—à–∏—Ç–µ –¥–µ—Ñ–µ–∫—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await state.set_state(RepairStates.entering_issue_description)

@android_repair_router.message(RepairStates.entering_issue_description)
async def enter_issue_description(message: types.Message, state: FSMContext):
    await state.update_data(issue_description=message.text)
    await message.answer("–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ —Å –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏–µ–º:")
    await state.set_state(RepairStates.attaching_photos)

@android_repair_router.message(RepairStates.attaching_photos)
async def upload_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
        return
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
    await state.set_state(RepairStates.entering_phone)

@android_repair_router.message(RepairStates.entering_phone, lambda message: message.contact)
async def confirm_repair(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()

    response = (
        f"üìå –í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç:\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['model']}\n"
        f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['issue_description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{phone_number}\n\n"
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."
    )

    await message.answer_photo(photo=data['photo'], caption=response, reply_markup=confirm_menu)
    await state.set_state(RepairStates.confirming)

@android_repair_router.message(RepairStates.confirming)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        user_id = message.from_user.id

        response_admin = (
            f"üîß –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ —Ä–µ–º–æ–Ω—Ç( Android ):\n\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['model']}\n"
            f"‚ö†Ô∏è –ü—Ä–æ–±–ª–µ–º–∞: {data['issue_description']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}"
        )

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply:{user_id}")]
            ]
        )

        try:
            for admin_id in ADMINS:
                await message.bot.send_photo(chat_id=admin_id, photo=data['photo'], caption=response_admin, reply_markup=keyboard)

            await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=main_menu)
        except:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=main_menu)

    await state.clear()
