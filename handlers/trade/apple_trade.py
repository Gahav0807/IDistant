from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import TradeInStates
from keyboards.apple import all_iphone_models
from keyboards.common import main_menu, share_phone_keyboard, confirm_menu,to_main_menu
from config import ADMINS

apple_trade_router = Router()

@apple_trade_router.message(lambda message: message.text == "AppleüîÑÔ∏è")
async def sell_apple(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å, –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:", reply_markup=all_iphone_models)
    await state.set_state(TradeInStates.choosing_current_model)

@apple_trade_router.message(TradeInStates.choosing_current_model)
async def enter_model(message: types.Message, state: FSMContext):
    await state.update_data(current_model=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏, –∞ —Ç–∞–∫–∂–µ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å; –ø—Ä–∏–º–µ—Ä:\n512/16", reply_markup=to_main_menu)
    await state.set_state(TradeInStates.entering_memory)

@apple_trade_router.message(TradeInStates.entering_memory)
async def enter_memory(message: types.Message, state: FSMContext):
    await state.update_data(memory=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –≤ %:")
    await state.set_state(TradeInStates.entering_battery)

@apple_trade_router.message(TradeInStates.entering_battery)
async def enter_battery(message: types.Message, state: FSMContext):
    await state.update_data(battery=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await state.set_state(TradeInStates.attaching_photos)

@apple_trade_router.message(TradeInStates.attaching_photos)
async def upload_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
        return
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–µ—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã, –±—ã–ª –ª–∏ –≤ —Ä–µ–º–æ–Ω—Ç–µ, –∫–æ–º–ø–ª–µ–∫—Ç –∏ —Ç.–¥.):")
    await state.set_state(TradeInStates.entering_description)

@apple_trade_router.message(TradeInStates.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å, –Ω–∞ –∫–æ—Ç–æ—Ä—É—é —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å —Å–≤–æ—ë —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ:", reply_markup=all_iphone_models)
    await state.set_state(TradeInStates.choosing_new_model)

@apple_trade_router.message(TradeInStates.choosing_new_model)
async def enter_price(message: types.Message, state: FSMContext):
    await state.update_data(new_model=message.text)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
    await state.set_state(TradeInStates.entering_phone)

@apple_trade_router.message(TradeInStates.entering_phone, lambda message: message.contact)
async def confirm_sale(message: types.Message, state: FSMContext):
    username = message.from_user.username
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()
    
    response = (
        f"–í—ã —Ö–æ—Ç–∏—Ç–µ –æ–±–º–µ–Ω—è—Ç—å:\n\n"
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['current_model']} ({data.get('memory', '‚Äî')})\n"
        f"üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë: {data['battery']}%\n"
        f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {phone_number}\n\n"
        f"üîÑ –ù–∞ –º–æ–¥–µ–ª—å: {data['new_model']}\n\n"
        f"Telegram: @{username}\n\n"
        
        "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."
    )

    await message.answer_photo(photo=data['photo'], caption=response, reply_markup=confirm_menu)
    await state.set_state(TradeInStates.confirming)

@apple_trade_router.message(TradeInStates.confirming)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        username = message.from_user.username
        data = await state.get_data()
        user_id = message.from_user.id

        response_admin = (
            f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –æ–±–º–µ–Ω:\n\n"
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['current_model']} ({data.get('memory', '‚Äî')})\n"
            f"üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë: {data['battery']}%\n"
            f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: {data['phone_number']}\n\n"
            f"üîÑ –ù–∞ –º–æ–¥–µ–ª—å: {data['new_model']}\n\n"
            f"Telegram: @{username}\n"
        )

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply:{user_id}")]
            ]
        )

        try:
            for admin_id in ADMINS:
                await message.bot.send_photo(chat_id=admin_id, photo=data['photo'], caption=response_admin, reply_markup=keyboard)

            await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=main_menu)
        except:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.", reply_markup=main_menu)
    else:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=main_menu)

    await state.clear()
