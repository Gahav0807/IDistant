from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from states import BuyAppleStates
from keyboards.apple import *
from keyboards.common import (
    condition_menu, while_512_memory_menu, all_memory_menu, color_menu,
    confirm_menu, share_phone_keyboard, main_menu, to_main_menu
)
from aiogram.types import InlineKeyboardMarkup, InlineKeyboardButton
from config import ADMINS

apple_buy_router = Router()

# --------------------------- APPLE ------------------------------------------

@apple_buy_router.message(lambda message: message.text == "Appleüçé")
async def buy_apple(message: types.Message, state: FSMContext):
    """–ù–∞—á–∞–ª–æ –ø—Ä–æ—Ü–µ—Å—Å–∞ –ø–æ–∫—É–ø–∫–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞ Apple."""
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å:", reply_markup=apple_device_menu)
    await state.set_state(BuyAppleStates.choosing_device)


@apple_buy_router.message(BuyAppleStates.choosing_device)
async def choose_condition(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    category = message.text
    await state.update_data(category=category)

    if category.lower() == "–¥—Ä—É–≥–æ–µ":
        await message.answer("–ï—Å–ª–∏ –≤ —Å–ø–∏—Å–∫–µ –Ω–µ—Ç –ø—Ä–µ–¥–ø–æ—á–∏—Ç–∞–µ–º–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞, —Å–≤—è–∂–∏—Ç–µ—Å—å —Å –Ω–∞—à–∏–º –º–µ–Ω–µ–¥–∂–µ—Ä–æ–º, –º—ã –ø–æ–¥–±–µ—Ä–µ–º —Ç–æ–≤–∞—Ä —Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ –¥–ª—è –≤–∞—Å;\n–ù–∞—à –º–µ–Ω–µ–¥–∂–µ—Ä: ", reply_markup=air_pods_ways)

    if category.lower() == "airpods":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –≤–∏–¥ AirPods:", reply_markup=air_pods_ways)
        await state.set_state(BuyAppleStates.choosing_airpods_way)
        return
    
    if category.lower() == "macbook":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä:", reply_markup=macbook_cpu)
        await state.set_state(BuyAppleStates.choosing_macbook_cpu)
        return
    
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=condition_menu)
    await state.set_state(BuyAppleStates.way_to_buy)

@apple_buy_router.message(BuyAppleStates.choosing_macbook_cpu)
async def choose_macbook_cpu(message: types.Message, state: FSMContext):
    cpu = message.text
    await state.update_data(macbook_cpu=cpu)

    if cpu.lower() == "m1":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=macbook_m1_models)
    elif cpu.lower() == "m2":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=macbook_m2_models)
    elif cpu.lower() == "m3":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=macbook_m3_models)

    await state.set_state(BuyAppleStates.choosing_model)

@apple_buy_router.message(BuyAppleStates.choosing_airpods_way)
async def choose_airpods_way(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ AirPods (–æ—Ä–∏–≥–∏–Ω–∞–ª/–∫–æ–ø–∏—è)."""
    way = message.text
    await state.update_data(airpods_way=way)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", reply_markup=air_pods_models)
    await state.set_state(BuyAppleStates.choosing_model)


@apple_buy_router.message(BuyAppleStates.way_to_buy)
async def process_condition(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    condition = message.text
    data = await state.get_data()
    category = data['category']
    await state.update_data(condition=condition)
    
    if condition == "–ü–æ–¥–æ–±—Ä–∞—Ç—å":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –±—é–¥–∂–µ—Ç:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(BuyAppleStates.pick_up_by_value)
        return
    
    if condition == "–ë–£":
        await message.answer("–ù–∞—à –∫–∞–Ω–∞–ª —Å –ë–£")
        return
    
    if category.lower() == "iphone" and condition == "–ù–æ–≤–æ–µ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPhone (13-16):", reply_markup=iphone_models)
        await state.set_state(BuyAppleStates.choosing_model)
        return
    
    if category.lower() == "apple watch" and condition == "–ù–æ–≤–æ–µ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å Apple Watch:", reply_markup=apple_watch_models)
        await state.set_state(BuyAppleStates.choosing_model)
        return
        
    if category.lower() == "ipad" and condition == "–ù–æ–≤–æ–µ":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å iPad:", reply_markup=ipad_models)
        await state.set_state(BuyAppleStates.choosing_model)
        return


@apple_buy_router.message(BuyAppleStates.pick_up_by_value)
async def pick_up_value(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –±—é–¥–∂–µ—Ç–∞ –¥–ª—è –ø–æ–¥–±–æ—Ä–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    value = message.text
    await state.update_data(pick_up_by_value=value)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –¥–ª—è —Å–≤—è–∑–∏ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=share_phone_keyboard)
    await state.set_state(BuyAppleStates.entering_phone)


@apple_buy_router.message(BuyAppleStates.choosing_model)
async def choose_model(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥–µ–ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    model = message.text
    await state.update_data(model=model)
    data = await state.get_data()
    category = data['category'].lower()

    if category == "iphone":
        memory_menu = all_memory_menu if "Pro" in model or "Plus" in model else while_512_memory_menu
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏:", reply_markup=memory_menu)
        await state.set_state(BuyAppleStates.choosing_memory)

    elif category == "apple watch":
        if "SE(1 –ø–æ–∫–æ–ª–µ–Ω–∏—è)" in model:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —á–∞—Å–æ–≤:", reply_markup=apple_watch_se1_size)
        elif "SE(2 –ø–æ–∫–æ–ª–µ–Ω–∏—è)" in model:
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —á–∞—Å–æ–≤:", reply_markup=apple_watch_se2_size)
        elif "10" in model: # Apple Watch Series 10
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —á–∞—Å–æ–≤:", reply_markup=apple_watch_10_size)
        else: # Apple Watch Series 8, 9 
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞–∑–º–µ—Ä —á–∞—Å–æ–≤:", reply_markup=apple_watch_simple_size)

        await state.set_state(BuyAppleStates.choosing_size)

    elif category == "airpods":
        airpods_prices = {
            "airpods 2": 990,
            "airpods 3": 1990,
            "airpods 4": 1990,
            "airpods pro": 1420,
            "airpods pro 2": 1990,
        }
        value = airpods_prices.get(model.lower(), 0)
        await state.update_data(value_of_airpods=value)
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π –Ω–æ–º–µ—Ä —Å–≤—è–∑–∏:", reply_markup=share_phone_keyboard)
        await state.set_state(BuyAppleStates.entering_phone)

    elif category == "ipad":
        memory_menus = {
            "ipad air (5)": ipad_air_5_memory,
            "ipad pro 12,9 (6)": ipad_pro_12_9_6_memory,
            "ipad pro 11 (5)": ipad_pro_11_5_memory,
        }
        memory_menu = memory_menus.get(model.lower())
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏:", reply_markup=memory_menu)
        await state.set_state(BuyAppleStates.choosing_memory)
    
    elif category == "macbook":
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏:", reply_markup=macbook_memory)
        await state.set_state(BuyAppleStates.choosing_memory)


@apple_buy_router.message(BuyAppleStates.choosing_size)
async def choose_size(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ä–∞–∑–º–µ—Ä–∞ Apple Watch."""
    size = message.text
    await state.update_data(size=size)
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=apple_watch_color)
    await state.set_state(BuyAppleStates.choosing_color)


@apple_buy_router.message(BuyAppleStates.choosing_memory)
async def choose_memory(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–±—ä–µ–º–∞ –ø–∞–º—è—Ç–∏."""
    memory = message.text
    await state.update_data(memory=memory)
    data = await state.get_data()
    category = data['category'].lower()

    if category == "macbook":
        await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
        await state.set_state(BuyAppleStates.entering_phone)

    elif category == "ipad":
        if data['model'].lower() == "ipad air (5)":
            await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞:", reply_markup=share_phone_keyboard)
            await state.set_state(BuyAppleStates.entering_phone)
        else:
            access_memory = ipad_pro_12_9_6_access_memory if data['model'].lower() == "ipad pro 12,9 (6)" else ipad_pro_11_5_access_memory
            await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏:", reply_markup=access_memory)
            await state.set_state(BuyAppleStates.choosing_access_memory)
    else:
        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —Ü–≤–µ—Ç:", reply_markup=color_menu)
        await state.set_state(BuyAppleStates.choosing_color)


@apple_buy_router.message(BuyAppleStates.choosing_access_memory)
async def choose_access_memory(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω–æ–π –ø–∞–º—è—Ç–∏ –¥–ª—è iPad."""
    access_memory = message.text
    await state.update_data(access_memory=access_memory)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
    await state.set_state(BuyAppleStates.entering_phone)


@apple_buy_router.message(BuyAppleStates.choosing_color)
async def choose_color(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ —Ü–≤–µ—Ç–∞ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞."""
    color = message.text
    await state.update_data(color=color)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
    await state.set_state(BuyAppleStates.entering_phone)


@apple_buy_router.message(BuyAppleStates.entering_phone, lambda message: message.contact)
async def confirm_buy_contact(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –≤–≤–æ–¥–∞ –Ω–æ–º–µ—Ä–∞ —Ç–µ–ª–µ—Ñ–æ–Ω–∞ —á–µ—Ä–µ–∑ –∫–æ–Ω—Ç–∞–∫—Ç."""
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    await confirm_order(message, state)


async def confirm_order(message: types.Message, state: FSMContext):
    """–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∑–∞–∫–∞–∑–∞ —Å –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ–º —Å–º–∞–π–ª–∏–∫–æ–≤."""
    data = await state.get_data()
    category = data['category'].lower()
    condition = data.get('condition', '').lower()
    phone_number = data['phone_number']

    # –ë–∞–∑–æ–≤—ã–µ —Å–º–∞–π–ª–∏–∫–∏ –¥–ª—è –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
    confirm_text = "\n\n‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ ‚ùå –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."
    contact_text = f"\nüìû –ö–æ–Ω—Ç–∞–∫—Ç: +{phone_number}"

    if condition == '–ø–æ–¥–æ–±—Ä–∞—Ç—å':
        response = (
            f"üîç –í—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–æ–±—Ä–∞—Ç—å: {data['category']}\n"
            f"üí∞ –ë—é–¥–∂–µ—Ç: {data['pick_up_by_value']} —Ä—É–±."
            f"{contact_text}"
            f"{confirm_text}"
        )
    else:
        device_emojis = {
            'macbook': 'üíª',
            'iphone': 'üì±',
            'apple watch': '‚åö',
            'ipad': 'üì≤',
            'airpods': 'üéß'
        }
        emoji = device_emojis.get(category, 'üì¶')
        
        if category == 'macbook':
            response = (
                f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']} {data['macbook_cpu']} {data['memory']}\n"
                f"‚ö° –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä: {data['macbook_cpu']}\n"
                f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}"
                f"{contact_text}"
                f"{confirm_text}"
            )
        elif category == 'iphone':
            response = (
                f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']}\n"
                f"üé® –¶–≤–µ—Ç: {data['color']}\n"
                f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}"
                f"{contact_text}"
                f"{confirm_text}"
            )
        elif category == 'apple watch':
            response = (
                f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']}\n"
                f"üìè –†–∞–∑–º–µ—Ä: {data.get('size', '–Ω–µ —É–∫–∞–∑–∞–Ω')}\n"
                f"üé® –¶–≤–µ—Ç: {data['color']}"
                f"{contact_text}"
                f"{confirm_text}"
            )
        elif category == 'ipad':
            response = (
                f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']}\n"
                f"üíæ –ü–∞–º—è—Ç—å: {data['memory']}\n"
                f"‚ö° RAM: {data.get('access_memory', '–Ω–µ —É–∫–∞–∑–∞–Ω–æ')}"
                f"{contact_text}"
                f"{confirm_text}"
            )
        elif category == 'airpods':
            if data.get('airpods_way', '').lower() == '–∫–æ–ø–∏—è':
                response = (
                    f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']} (–ö–æ–ø–∏—è)\n"
                    f"üí≤ –¶–µ–Ω–∞: {data['value_of_airpods']} —Ä—É–±."
                    f"{contact_text}"
                    f"{confirm_text}"
                )
            else:
                response = (
                    f"{emoji} –í—ã —Ö–æ—Ç–∏—Ç–µ –∫—É–ø–∏—Ç—å: {data['model']} (–û—Ä–∏–≥–∏–Ω–∞–ª)"
                    f"{contact_text}"
                    f"{confirm_text}"
                )

    await message.answer(response, reply_markup=confirm_menu)
    await state.set_state(BuyAppleStates.confirming)


@apple_buy_router.message(BuyAppleStates.confirming)
async def process_confirmation(message: types.Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞."""
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        user_id = message.from_user.id
        category = data['category']
        condition = data.get('condition', '').lower()

        response_admin = f"üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (Apple, {category}):\n\n"
        if condition == '–ø–æ–¥–æ–±—Ä–∞—Ç—å':
            response_admin += (
                f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∂–µ–ª–∞–µ—Ç –ø–æ–¥–æ–±—Ä–∞—Ç—å –¥–µ–≤–∞–π—Å!\n\n"
                f"üì± –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {data['category']}\n"
                f"üí∏ –ë—é–¥–∂–µ—Ç: {data['pick_up_by_value']}\n"
                f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
            )
        else:
            if category.lower() == 'macbook':
                response_admin += (
                    f"üíª –ú–æ–¥–µ–ª—å: {data['model']} {data['macbook_cpu']} {data['memory']} \n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n\n"
                )

            if category.lower() == 'iphone':
                response_admin += (
                    f"üì± –ú–æ–¥–µ–ª—å: {data['model']} {data['memory']} {data['color']}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
                )
            elif category.lower() == 'apple watch':
                response_admin += (
                    f"‚åö –ú–æ–¥–µ–ª—å: {data['model']} {data['color']}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
                )
            elif category.lower() == 'ipad':
                response_admin += (
                    f"üì± –ú–æ–¥–µ–ª—å: {data['model']} {data['memory']} {data.get('access_memory', '')}\n"
                    f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
                )
            elif category.lower() == 'airpods':
                if data.get('airpods_way', '').lower() == '–∫–æ–ø–∏—è':
                    response_admin += (
                        f"üéß –ú–æ–¥–µ–ª—å: {data['model']}\n"
                        f"üí∏ –¶–µ–Ω–∞: {data['value_of_airpods']} —Ä—É–±.\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
                    )
                else:
                    response_admin += (
                        f"üéß –ú–æ–¥–µ–ª—å: {data['model']}\n"
                        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n"
                    )

        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[[
                InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply:{user_id}")
            ]]
        )

        try:
            for admin_id in ADMINS:
                await message.bot.send_message(chat_id=admin_id, text=response_admin, reply_markup=keyboard)

            await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –û–∂–∏–¥–∞–π—Ç–µ –æ—Ç–≤–µ—Ç–∞ –º–µ–Ω–µ–¥–∂–µ—Ä–∞.", reply_markup=main_menu)
        except:
            await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=main_menu)

    await state.clear()