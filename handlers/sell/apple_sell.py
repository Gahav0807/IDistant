from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from states import SellAppleStates
from keyboards.apple import apple_device_menu, iphone_models, apple_watch_models, air_pods_models
from keyboards.common import main_menu, share_phone_keyboard, confirm_menu, all_memory_menu, while_512_memory_menu

apple_sell_router = Router()

@apple_sell_router.message(lambda message: message.text == "Appleüí∏")
async def sell_apple(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:", reply_markup=apple_device_menu)
    await state.set_state(SellAppleStates.entering_device)

@apple_sell_router.message(SellAppleStates.entering_device)
async def select_device(message: types.Message, state: FSMContext):
    category = message.text
    await state.update_data(category=category)
    
    if category.lower() == "airpods":
        await message.answer("–ú—ã —Å–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ AirPods")
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=air_pods_models)
        await state.set_state(SellAppleStates.entering_model)
        return
    elif category.lower() == "iphone":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=iphone_models)
        await state.set_state(SellAppleStates.entering_model)
        return
    elif category.lower() == "apple watch":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=apple_watch_models)
        await state.set_state(SellAppleStates.entering_model)
        return

@apple_sell_router.message(SellAppleStates.entering_model)
async def enter_model(message: types.Message, state: FSMContext):
    data = await state.get_data()
    model=message.text
    await state.update_data(model=model)
    if data['category'].lower() == 'airpods' or data['category'].lower() == 'apple watch':
        await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=types.ReplyKeyboardRemove())
        await state.set_state(SellAppleStates.attaching_photos)
        return
    elif data['category'].lower() == 'iphone':
        if "Pro" in model or "Plus" in model:
            memory_menu = all_memory_menu
        else:
            memory_menu = while_512_memory_menu

        await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –æ–±—ä–µ–º –ø–∞–º—è—Ç–∏:", reply_markup=memory_menu)
        await state.set_state(SellAppleStates.entering_memory)
           

@apple_sell_router.message(SellAppleStates.entering_memory)
async def enter_memory(message: types.Message, state: FSMContext):
    await state.update_data(memory=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –≤ %:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(SellAppleStates.entering_battery)

@apple_sell_router.message(SellAppleStates.entering_battery)
async def enter_battery(message: types.Message, state: FSMContext):
    await state.update_data(battery=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=types.ReplyKeyboardRemove())
    await state.set_state(SellAppleStates.attaching_photos)

@apple_sell_router.message(SellAppleStates.attaching_photos)
async def upload_photo(message: types.ChatPhoto, state: FSMContext):
    photo_id = message.photo[-1].file_id
    await state.update_data(photo=photo_id)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–µ—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã, –±—ã–ª –ª–∏ –≤ —Ä–µ–º–æ–Ω—Ç–µ, –∫–æ–º–ø–ª–µ–∫—Ç –∏ —Ç.–¥.):")
    await state.set_state(SellAppleStates.entering_description)

@apple_sell_router.message(SellAppleStates.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É:")
    await state.set_state(SellAppleStates.entering_price)

@apple_sell_router.message(SellAppleStates.entering_price)
async def enter_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞ –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ:", reply_markup=share_phone_keyboard)
    await state.set_state(SellAppleStates.entering_phone)

@apple_sell_router.message(SellAppleStates.entering_phone, lambda message: message.contact)
async def confirm_sale(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()
    
    if data['category'].lower() == 'airpods' or data['category'].lower() == 'apple watch':
        response = (
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n"
                f"{data['model']}\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–¶–µ–Ω–∞: {data['price']}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.")
    else:
        response = (
                f"–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n"
                f"{data['model']} ({data['memory']})\n"
                f"–°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë: {data['battery']}%\n"
                f"–û–ø–∏—Å–∞–Ω–∏–µ: {data['description']}\n"
                f"–¶–µ–Ω–∞: {data['price']}\n"
                f"–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞: {phone_number}\n\n"
                "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É.")
    
    await message.answer_photo(photo=data['photo'], caption=response, reply_markup=confirm_menu)
    await state.set_state(SellAppleStates.confirming)

@apple_sell_router.message(SellAppleStates.confirming)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=main_menu)
    else:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=main_menu)
    await state.clear()
