from aiogram import Router, types, F
from aiogram.fsm.context import FSMContext
from states import SellAppleStates
from keyboards.apple import *
from keyboards.common import main_menu, share_phone_keyboard, confirm_menu, to_main_menu
from config import ADMINS

apple_sell_router = Router()

@apple_sell_router.message(lambda message: message.text == "Appleüí∏")
async def sell_apple(message: types.Message, state: FSMContext):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, –∫–æ—Ç–æ—Ä–æ–µ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:", reply_markup=apple_device_menu)
    await state.set_state(SellAppleStates.entering_device)

@apple_sell_router.message(SellAppleStates.entering_device)
async def select_device(message: types.Message, state: FSMContext):
    category = message.text.lower()
    await state.update_data(category=category)

    if category == "airpods":
        await message.answer("–ú—ã —Å–∫—É–ø–∞–µ–º —Ç–æ–ª—å–∫–æ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ AirPods")

    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –º–æ–¥–µ–ª—å —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:", reply_markup=to_main_menu)
        await state.set_state(SellAppleStates.entering_model)

@apple_sell_router.message(SellAppleStates.entering_model)
async def enter_model(message: types.Message, state: FSMContext):
    await state.update_data(model=message.text)
    data = await state.get_data()
    
    if data['category'] == "apple watch":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ä–∞–∑–º–µ—Ä Apple Watch:")
        await state.set_state(SellAppleStates.entering_size)
    else:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –æ–±—ä–µ–º –≤—Å—Ç—Ä–æ–µ–Ω–Ω–æ–π –ø–∞–º—è—Ç–∏ –∏ –æ–ø–µ—Ä–∞—Ç–∏–≤–Ω—É—é –ø–∞–º—è—Ç—å (–Ω–∞–ø—Ä–∏–º–µ—Ä, 512/16):")
        await state.set_state(SellAppleStates.entering_memory)

@apple_sell_router.message(SellAppleStates.entering_size)
async def enter_size(message: types.Message, state: FSMContext):
    await state.update_data(size=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Ü–≤–µ—Ç Apple Watch:")
    await state.set_state(SellAppleStates.entering_color)

@apple_sell_router.message(SellAppleStates.entering_color)
async def enter_color(message: types.Message, state: FSMContext):
    await state.update_data(color=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await state.set_state(SellAppleStates.attaching_photos)

@apple_sell_router.message(SellAppleStates.entering_memory)
async def enter_memory(message: types.Message, state: FSMContext):
    await state.update_data(memory=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∞–∫–∫—É–º—É–ª—è—Ç–æ—Ä–∞ –≤ %:")
    await state.set_state(SellAppleStates.entering_battery)

@apple_sell_router.message(SellAppleStates.entering_battery)
async def enter_battery(message: types.Message, state: FSMContext):
    await state.update_data(battery=message.text)
    await message.answer("–ü—Ä–∏–∫—Ä–µ–ø–∏—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞:")
    await state.set_state(SellAppleStates.attaching_photos)

@apple_sell_router.message(SellAppleStates.attaching_photos)
async def upload_photo(message: types.Message, state: FSMContext):
    if not message.photo:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–æ—Ç–æ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–∞.")
        return
    await state.update_data(photo=message.photo[-1].file_id)
    await message.answer("–û–ø–∏—à–∏—Ç–µ —Ç–æ–≤–∞—Ä (–µ—Å—Ç—å –ª–∏ –¥–µ—Ñ–µ–∫—Ç—ã, –±—ã–ª –ª–∏ –≤ —Ä–µ–º–æ–Ω—Ç–µ, –∫–æ–º–ø–ª–µ–∫—Ç –∏ —Ç.–¥.):")
    await state.set_state(SellAppleStates.entering_description)

@apple_sell_router.message(SellAppleStates.entering_description)
async def enter_description(message: types.Message, state: FSMContext):
    await state.update_data(description=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –∂–µ–ª–∞–µ–º—É—é —Ü–µ–Ω—É:")
    await state.set_state(SellAppleStates.entering_price)

@apple_sell_router.message(SellAppleStates.entering_price)
async def enter_price(message: types.Message, state: FSMContext):
    await state.update_data(price=message.text)
    await message.answer("–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å –≤–∞—à–∏–º –Ω–æ–º–µ—Ä–æ–º —Ç–µ–ª–µ—Ñ–æ–Ω–∞: ", reply_markup=share_phone_keyboard)
    await state.set_state(SellAppleStates.entering_phone)

@apple_sell_router.message(SellAppleStates.entering_phone, lambda message: message.contact)
async def confirm_sale(message: types.Message, state: FSMContext):
    phone_number = message.contact.phone_number
    await state.update_data(phone_number=phone_number)
    data = await state.get_data()

    details = [
        f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['category']}",
        f"üîπ –ú–æ–¥–µ–ª—å: {data['model']} ({data.get('size')})" if data['category'] == 'apple watch' else f"üîπ –ú–æ–¥–µ–ª—å: {data['model']} ({data.get('memory')})",
        f"üé® –¶–≤–µ—Ç: {data.get('color')}" if data.get('color') else None,
        f"üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë: {data.get('battery')}%" if data.get('battery') else None,
        f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}",
        f"üí∞ –¶–µ–Ω–∞: {data['price']}",
        f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{phone_number}",
    ]

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
    response = "–í—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–¥–∞—Ç—å:\n\n" + "\n".join(filter(None, details)) + "\n\n–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ –∑–∞—è–≤–∫—É."

    await message.answer_photo(photo=data['photo'], caption=response, reply_markup=confirm_menu)
    await state.set_state(SellAppleStates.confirming)

@apple_sell_router.message(SellAppleStates.confirming)
async def process_confirmation(message: types.Message, state: FSMContext):
    if message.text == "–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å":
        data = await state.get_data()
        user_id = message.from_user.id

        details = [
            f"üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: {data['category']}",
            f"üîπ –ú–æ–¥–µ–ª—å: {data['model']} ({data.get('size')})" if data['category'] == 'apple watch' else f"üîπ –ú–æ–¥–µ–ª—å: {data['model']} ({data.get('memory')})",
            f"üé® –¶–≤–µ—Ç: {data.get('color')}" if data.get('color') else None,
            f"üîã –°–æ—Å—Ç–æ—è–Ω–∏–µ –ê–ö–ë: {data.get('battery')}%" if data.get('battery') else None,
            f"‚ÑπÔ∏è –û–ø–∏—Å–∞–Ω–∏–µ: {data.get('description')}",
            f"üí∞ –¶–µ–Ω–∞: {data['price']}",
            f"üìû –ö–æ–Ω—Ç–∞–∫—Ç: +{data['phone_number']}\n\n"
        ]

        # –§–∏–ª—å—Ç—Ä—É–µ–º —Å–ø–∏—Å–æ–∫, –æ—Å—Ç–∞–≤–ª—è—è —Ç–æ–ª—å–∫–æ –Ω–µ–ø—É—Å—Ç—ã–µ —Å—Ç—Ä–æ–∫–∏
        response_admin = "üîî –ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –ø—Ä–æ–¥–∞–∂—É (Apple):\n\n" + "\n".join(filter(None, details))

        keyboard = types.InlineKeyboardMarkup(
            inline_keyboard=[
                [types.InlineKeyboardButton(text="–û—Ç–≤–µ—Ç–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é", callback_data=f"admin_reply:{user_id}")]
            ]
        )

        for admin_id in ADMINS:
            await message.bot.send_photo(chat_id=admin_id, photo=data['photo'], caption=response_admin, reply_markup=keyboard)

        await message.answer("–ó–∞—è–≤–∫–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞! –í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è —Å –≤–∞–º–∏ —Å–≤—è–∂–µ—Ç—Å—è –º–µ–Ω–µ–¥–∂–µ—Ä.", reply_markup=main_menu)
    else:
        await message.answer("–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –∑–∞—è–≤–∫—É.", reply_markup=main_menu)
    
    await state.clear()
