from aiogram import Router, types
from aiogram.fsm.context import FSMContext
from aiogram.filters import StateFilter
from aiogram.fsm.state import State, StatesGroup
from aiogram.utils.keyboard import InlineKeyboardBuilder
from keyboards.common import main_menu

admin_router = Router()

# –°–æ—Å—Ç–æ—è–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–∏ –æ—Ç–≤–µ—Ç–µ
class AdminReplyState(StatesGroup):
    replying = State()
    in_dialog = State()  # –ù–æ–≤–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è –¥–∏–∞–ª–æ–≥–∞

pending_requests = {}  # –•—Ä–∞–Ω–∏–º –∑–∞—è–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∞ –ø–æ –∑–∞—è–≤–∫–µ
@admin_router.callback_query(lambda c: c.data.startswith("admin_reply:"))
async def admin_start_reply(callback: types.CallbackQuery, state: FSMContext):
    user_id = int(callback.data.split(":")[1])
    await state.update_data(user_id=user_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥', —á—Ç–æ–±—ã –∑–∞–∫–æ–Ω—á–∏—Ç—å):",
        reply_markup=types.ReplyKeyboardMarkup(
            keyboard=[
                [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
            ],
            resize_keyboard=True,
            one_time_keyboard=True
        )
    )
    await state.set_state(AdminReplyState.replying)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤–≤–æ–¥–∞ –æ—Ç–≤–µ—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
@admin_router.message(AdminReplyState.replying)
async def admin_send_reply(message: types.Message, state: FSMContext):
    if message.text == "–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥":
        await message.answer(
            "–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω.",
            reply_markup=main_menu
        )
        await state.clear()
        return
    
    data = await state.get_data()
    user_id = data["user_id"]
    
    try:
        await message.bot.send_message(
            chat_id=user_id,
            text=f"üì¢ –û—Ç–≤–µ—Ç –æ—Ç –º–µ–Ω–µ–¥–∂–µ—Ä–∞:\n\n{message.text}"
        )
        await message.answer(
            "‚úÖ –í–∞—à –æ—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –ø–∏—Å–∞—Ç—å –∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ '–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥'.",
            reply_markup=types.ReplyKeyboardMarkup(
                keyboard=[
                    [types.KeyboardButton(text="–ó–∞–≤–µ—Ä—à–∏—Ç—å –¥–∏–∞–ª–æ–≥")]
                ],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
    except Exception as e:
        await message.answer(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ: {e}")
        await state.clear()